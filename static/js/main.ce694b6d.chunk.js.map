{"version":3,"sources":["quizzer/QuizCard.tsx","quizzer/QuizQuestion.tsx","quizzer/QuizExpanded.tsx","quizzer/QuestionEdit.tsx","quizzer/QuizEdit.tsx","quizzer/QuizView.tsx","quizzer/QuizList.tsx","quizzer/AddQuizModal.tsx","quizzer/Quizzer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QuizCard","_ref","quiz","handleClick","filteredQuestions","questionList","filter","q","published","react_default","a","createElement","className","onClick","id","title","length","body","QuizQuestion","index","question","submitted","handleSubmit","addPoints","editQuestionSub","e","target","value","Fragment","data-testid","points","type","Form","Group","controlId","Control","submission","onChange","options","map","option","i","Check","name","key","label","checked","expected","Button","disabled","QuizExpanded","editQuiz","resetView","switchEdit","_useState","useState","_useState2","Object","slicedToArray","setPoints","_useState3","Array","_useState4","submitArr","setSubmitArr","handleQuestionSubmit","newSubmitArr","toConsumableArray","splice","totalPoints","reduce","prev","p","prevCount","reset","console","log","objectSpread","questionId","sub","variant","QuizQuestion_QuizQuestion","QuestionEdit","lastIndex","editQuestion","removeQuestion","swapQuestion","findIndex","s","b","handleRadioChange","idx","parseInt","Label","Select","fill","newNum","newOptions","handleChoiceChange","QuizEdit","deleteQuiz","newQuiz","setNewQuiz","newQuestion","idx1","idx2","as","rows","QuestionEdit_QuestionEdit","concat","newquiz","saveChanges","QuizView","edit","setEdit","QuizEdit_QuizEdit","QuizExpanded_QuizExpanded","QuizList","quizzes","showModal","displayId","setDisplayId","handleQuizView","resetQuizView","QuizCard_QuizCard","QuizView_QuizView","AddQuizModal","show","handleCloseModal","addQuiz","setTitle","setBody","Modal","onHide","animation","Header","closeButton","Title","Body","Footer","QUIZZES","Quizzer","setQuizzes","showAddModal","setShowAddModal","QuizList_QuizList","qId","AddQuizModal_AddQuizModal","style","color","App","quizzer","setQuizzer","display","Quizzer_Quizzer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"0zHAMaA,SAAW,SAAHC,GAMf,IALFC,EAAID,EAAJC,KACAC,EAAWF,EAAXE,YAKMC,EAAoBF,EAAKG,aAAaC,OACxC,SAACC,GAAW,OACPL,EAAKM,WAAaD,EAAEC,YAAeN,EAAKM,YAGjD,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,MACIC,UAAU,QACVC,QAAS,WACLV,EAAYD,EAAKY,MAGpBZ,EAAKa,OAEVN,EAAAC,EAAAC,cAAA,SACKP,EAAkBY,OAAM,YACK,IAA7BZ,EAAkBY,OAAe,IAAM,KAGhDP,EAAAC,EAAAC,cAAA,SAAIT,EAAKe,+BC3BRC,SAAe,SAAHjB,GAanB,IAZFkB,EAAKlB,EAALkB,MACAC,EAAQnB,EAARmB,SACAC,EAASpB,EAAToB,UACAC,EAAYrB,EAAZqB,aACAC,EAAStB,EAATsB,UACAC,EAAevB,EAAfuB,gBAQMrB,EAAc,SAACsB,GACZJ,GACDG,EAAgBJ,EAASN,GAAIW,EAAEC,OAAOC,QAW9C,OACIlB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACInB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIkB,cAAY,iBACXV,EAAQ,EAAC,KAAIC,EAASH,MAE3BR,EAAAC,EAAAC,cAAA,UACKS,EAASU,OAAM,MAAyB,IAApBV,EAASU,OAAe,IAAM,KAErD,IACNrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACQ,0BAAlBQ,EAASW,MACNtB,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,sBAClBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTN,cAAY,gBACZF,MAAOP,EAASgB,WAChBC,SAAUlC,KAIH,6BAAlBiB,EAASW,MACNtB,EAAAC,EAAAC,cAAA,WACKS,EAASkB,QAAQC,IACd,SAACC,EAAgBC,GAAS,OACtBhC,EAAAC,EAAAC,cAACqB,EAAA,EAAKU,MAAK,CACPX,KAAM,WACNY,KAAM,iBAAmBxB,EACzByB,IAAKJ,EAAS,MAAQC,EACtBI,MAAOL,EACPb,MAAOa,EACPM,QAAS1B,EAASgB,aAAeI,EACjCH,SAAUlC,OAM9BM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAWS,EAAY,GAAK,UAC3BD,EAASgB,aAAehB,EAAS2B,SAC5B,eACA,UAEVtC,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHC,SAAU5B,EACVT,UAAU,aACVC,QAvDE,WACtBS,EAAaH,GACTC,EAASgB,aAAehB,EAAS2B,UACjCxB,EAAU,KAoDiC,gBCzE1C2B,EAAe,SAAHjD,GAUnB,IATFC,EAAID,EAAJC,KACAiD,EAAQlD,EAARkD,SACAC,EAASnD,EAATmD,UACAC,EAAUpD,EAAVoD,WAOMjD,EAAoBF,EAAKG,aAAaC,OACxC,SAACC,GAAW,OACPL,EAAKM,WAAaD,EAAEC,YAAeN,EAAKM,YAC/C8C,EAE0BC,mBAAiB,GAAEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAxCxB,EAAM0B,EAAA,GAAEG,EAASH,EAAA,GAAAI,EACUL,mBAC9B,IAAIM,MAAMzD,EAAkBY,SAC/B8C,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAFMG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAIxBG,EAAuB,SAAC9C,GAC1B,IAAM+C,EAAYT,OAAAU,EAAA,EAAAV,CAAOM,GACzBG,EAAaE,OAAOjD,EAAO,GAAG,GAC9B6C,EAAaE,IAGXG,EAAcjE,EAAkBkE,OAClC,SAACC,EAAchE,GAAW,OAAagE,EAAOhE,EAAEuB,QAChD,GAGEP,EAAY,SAACiD,GACfb,EAAU,SAACc,GAAS,OAAKA,EAAYD,KAGnCE,EAAQ,WACVC,QAAQC,IAAI,OACZZ,EAAa,IAAIH,MAAMzD,EAAkBY,SACzCmC,EAASjD,EAAKY,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GACVvD,EAAI,CACPG,aAAcH,EAAKG,aAAakC,IAC5B,SAAChC,GAAW,OAAAkD,OAAAoB,EAAA,EAAApB,CAAA,GAAqBlD,EAAC,CAAE6B,WAAY,UAIxDuB,EAAU,IAGRnC,EAAkB,SAACsD,EAAoBC,GACzC5B,EAASjD,EAAKY,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GACVvD,EAAI,CACPG,aAAcH,EAAKG,aAAakC,IAAI,SAACnB,GAAiB,OAAa0D,IAAe1D,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAAKrC,EAAQ,CAAEgB,WAAW2C,IAAGtB,OAAAoB,EAAA,EAAApB,CAAA,GAAMrC,SAIzI,OACIX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACInB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASV,EAAKa,OAC5BN,EAAAC,EAAAC,cAAA,SACKP,EAAkBY,OAAM,YACK,IAA7BZ,EAAkBY,OAAe,IAAM,KAGhDP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHpC,UAAU,+BACVoE,QAAQ,UACRnE,QAAS,WACL6D,IACArB,MACF,QAIN5C,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHpC,UAAU,+BACVoE,QAAQ,SACRnE,QAASuC,GAER,UAIb3C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQV,EAAKe,MACzBb,EAAkBmC,IAAI,SAAChC,EAAaY,GAAa,OAC9CV,EAAAC,EAAAC,cAACsE,EAAY,CACTrC,IAAK1C,EAAKY,GAAK,IAAMP,EAAEO,GACvBK,MAAOA,EACPC,SAAWb,EACXc,UAAW0C,EAAU5C,GACrBG,aAAc2C,EACd1C,UAAWA,EACXC,gBAAiBA,MAGzBf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CAACgC,QAAQ,SAASnE,QAAS6D,GAAM,SAGxCjE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBACXkB,EAAM,IAAGuC,MC3GjBa,SAAe,SAAHjF,GAcnB,IAbFkB,EAAKlB,EAALkB,MACAgE,EAASlF,EAATkF,UACA/D,EAAQnB,EAARmB,SACAgE,EAAYnF,EAAZmF,aACAC,EAAcpF,EAAdoF,eACAC,EAAYrF,EAAZqF,aAAYhC,EASGC,mBACXnC,EAASkB,QAAQiD,UAAU,SAACC,GAAS,OAAKpE,EAAS2B,WAAayC,KACnEhC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAFM5C,EAAC8C,EAAA,GAAEiC,EAACjC,EAAA,GA4CLkC,EAAoB,SAACjE,GACvB,IAAMkE,EAAMC,SAASnE,EAAEC,OAAOC,OAC9B8D,EAAEE,GACFP,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACX2B,SAAU3B,EAASkB,QAAQqD,OAInC,OACIlF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACInB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKQ,EAAQ,EAAC,MACdV,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CACPrB,UAAU,cACVsB,UAAU,mBAEVzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTR,MAAOP,EAASH,KAChBY,cAAY,sBACZQ,SAAU,SACNZ,GAEA2D,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACXH,KAAMQ,EAAEC,OAAOC,cAMnClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CACPrB,UAAU,eACVsB,UAAU,oBAEVzB,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTR,MAAOP,EAASU,OAChBC,KAAK,SACLM,SA5DP,SAACZ,GACrBL,EAASU,OAAS8D,SAASnE,EAAEC,OAAOC,OACjCyD,EAAahE,EAASN,GAAIM,OA6DVX,EAAAC,EAAAC,cAAA,eAA2B,IAApBS,EAASU,OAAe,IAAM,MAG7CrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,sBAClBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,eACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAK8D,OAAM,CACRlF,UAAU,gBACVe,MAAOP,EAASW,KAChBM,SApFX,WACjBoD,EAAE,GACFL,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACXW,KAAM,2BACNgB,SAAU,iBACVT,QAASuB,MAAM,GAAGkC,KAAK,uBAgFCtF,EAAAC,EAAAC,cAAA,UACIkB,cACI,0BAA4BV,EAEhCQ,MAAM,4BAA0B,mBAIpClB,EAAAC,EAAAC,cAAA,UACIkB,cACI,0BAA4BV,EAEhCQ,MAAM,yBAAuB,kBAMtB,6BAAlBP,EAASW,MACNtB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACInB,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,oBAClBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,kBACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTvB,UAAU,cACVe,MAAOP,EAASkB,QAAQtB,OACxBe,KAAK,SACLM,SA5Hf,SAACZ,GACtBgE,EAAE,GACF,IAAMO,EACFJ,SAASnE,EAAEC,OAAOC,OAAS,EAAI,EAAIiE,SAASnE,EAAEC,OAAOC,OACzDyD,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACXW,KAAM,2BACNgB,SAAU,iBACVT,QAASuB,MAAMmC,GAAQD,KAAK,2BA0HhBtF,EAAAC,EAAAC,cAAA,WACuB,0BAAlBS,EAASW,MACNtB,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,4BAClBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,gBACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTR,MAAOP,EAAS2B,SAChBV,SAAU,SACNZ,GAEA2D,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACX2B,SAAUtB,EAAEC,OAAOC,aAMpB,6BAAlBP,EAASW,MACNtB,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,+BAClBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,gBACVzE,EAASkB,QAAQC,IACd,SAACC,EAAgBC,GAAS,OACtBhC,EAAAC,EAAAC,cAAA,OACIiC,IAAKH,EACL7B,UAAU,sBAEVH,EAAAC,EAAAC,cAACqB,EAAA,EAAKU,MAAK,CACPX,KAAK,QACLY,KACI,iBAAmBxB,EAEvBQ,MAAOc,EACPK,QAASpC,IAAM+B,EACfJ,SAAUqD,IAEdjF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTQ,KACI,iBAAmBxB,EAEvBQ,MAAOa,EACPH,SAAU,SACNZ,IAhJzB,SACvBA,EACAgB,GAEA,IAAMwD,EAAUxC,OAAAU,EAAA,EAAAV,CAAOrC,EAASkB,SAChC2D,EAAW7B,OAAO3B,EAAG,EAAGhB,EAAEC,OAAOC,OACjCyD,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACXkB,QAAS2D,EACTlD,SAAUrC,IAAM+B,EAAIhB,EAAEC,OAAOC,MAAQP,EAAS2B,YAyIFmD,CACIzE,EACAgB,YAWxChC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHC,SAAoB,IAAV9B,EACVP,UAAU,cACVC,QAAS,WACLyE,EAAanE,EAAOA,EAAQ,KAC9B,UAINV,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHC,SAAU9B,IAAUgE,EACpBvE,UAAU,cACVC,QAAS,WACLyE,EAAanE,EAAOA,EAAQ,KAC9B,YAMdV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAKU,MAAK,CACP9B,UAAU,2BACViB,cAAY,2BACZE,KAAK,WACLjB,GAAG,8BACH+B,MAAM,YACNC,QAAS1B,EAASZ,UAClB6B,SAAU,SAACZ,GACP2D,EAAahE,EAASN,GAAG2C,OAAAoB,EAAA,EAAApB,CAAA,GAClBrC,EAAQ,CACXZ,UAAWiB,EAAEC,OAAOoB,cAIhCrC,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHgC,QAAQ,SACRnE,QAAS,WACLwE,EAAejE,EAASN,MAC1B,eCnPbqF,SAAW,SAAHlG,GAYf,IAXFC,EAAID,EAAJC,KACAiD,EAAQlD,EAARkD,SACAiD,EAAUnG,EAAVmG,WACA/C,EAAUpD,EAAVoD,WACAD,EAASnD,EAATmD,UAASE,EAQqBC,mBAAQE,OAAAoB,EAAA,EAAApB,CAAA,GAAYvD,IAAOsD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAlD+C,EAAO7C,EAAA,GAAE8C,EAAU9C,EAAA,GAEpB4B,EAAe,SAACN,EAAoByB,GACtCD,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GACJ4C,EAAO,CACVhG,aAAcgG,EAAQhG,aAAakC,IAAI,SAACnB,GAAiB,OAAe0D,IAAa1D,EAASN,GAAE2C,OAAAoB,EAAA,EAAApB,CAAA,GAAO8C,GAAanF,QAItHiE,EAAiB,SAACP,GACpBwB,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GACJ4C,EAAO,CACVhG,aAAcgG,EAAQhG,aAAaC,OAAO,SAACc,GAAiB,OAAa0D,IAAe1D,EAASN,SAYnGwE,EAAe,SAACkB,EAAcC,GAChCH,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GACJ4C,EAAO,CACVhG,aAAcgG,EAAQhG,aAAakC,IAC/B,SAAChC,EAAaoF,GACV,OAAIA,IAAQa,EAAaH,EAAQhG,aAAaoG,GAC1Cd,IAAQc,EAAaJ,EAAQhG,aAAamG,GAClCH,EAAQhG,aAAaoG,SAMjD,OACIhG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,kBAClBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,gBACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTR,MAAO0E,EAAQtF,MACfsB,SAAU,SACNZ,GAAsC,OAEtC6E,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GACJ4C,EAAO,CACVtF,MAAOU,EAAEC,OAAOC,aAKhClB,EAAAC,EAAAC,cAACqB,EAAA,EAAKU,MAAK,CACP9B,UAAU,kBACVmB,KAAK,WACLjB,GAAG,qBACH+B,MAAM,iBACNhB,cAAY,iBACZiB,QAASuD,EAAQ7F,UACjB6B,SAAU,SACNZ,GAEA6E,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GACJ4C,EAAO,CACV7F,UAAWiB,EAAEC,OAAOoB,eAKpCrC,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,sBACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTuE,GAAG,WACHC,KAAM,EACNhF,MAAO0E,EAAQpF,KACfoB,SAAU,SAACZ,GAAsC,OAC7C6E,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GAAK4C,EAAO,CAAEpF,KAAMQ,EAAEC,OAAOC,cAMxDlB,EAAAC,EAAAC,cAAA,WACK0F,EAAQhG,aAAakC,IAAI,SAAChC,EAAaY,GAAa,OACjDV,EAAAC,EAAAC,cAACiG,EAAY,CACThE,IAAKyD,EAAQvF,GAAK,IAAMP,EAAEO,GAC1BK,MAAOA,EACPgE,UAAWkB,EAAQhG,aAAaW,OAAS,EACzCI,SAAUb,EACV6E,aAAcA,EACdC,eAAgBA,EAChBC,aAAcA,OAI1B7E,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHpC,UAAU,sBACVC,QAAS,WACLyF,EAAW7C,OAAAoB,EAAA,EAAApB,CAAA,GACJ4C,EAAO,CACVhG,aAAY,GAAAwG,OAAApD,OAAAU,EAAA,EAAAV,CACL4C,EAAQhG,cAAY,CACvB,CACIS,GAAIuF,EAAQhG,aAAaW,OACzBC,KAAM,mBACNc,KAAM,wBACNO,QAAS,GACTF,WAAY,GACZW,SAAU,iBACVjB,OAAQ,EACRtB,WAAW,UAIzB,gBAINC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHgC,QAAQ,UACRpE,UAAU,gBACVC,QAAS,YA/Gb,WAChB,IACMiG,EAAOrD,OAAAoB,EAAA,EAAApB,CAAA,GAAO4C,EAAO,CAACtF,MADZ,SAEhBuF,EAAWQ,GACX3D,EAASjD,EAAKY,GAAGuF,GA4GOU,GACA1D,MACF,QAIN5C,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CAACgC,QAAQ,UAAUnE,QAASwC,GAAW,WAIlD5C,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHgC,QAAQ,SACRnE,QAAS,WACLuF,EAAWlG,EAAKY,IAChBsC,MACF,oBC9Jb4D,SAAW,SAAH/G,GASf,IARFC,EAAID,EAAJC,KACAiD,EAAQlD,EAARkD,SACAiD,EAAUnG,EAAVmG,WACAhD,EAASnD,EAATmD,UAASE,EAMeC,oBAAS,GAAMC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAhC2D,EAAIzD,EAAA,GAAE0D,EAAO1D,EAAA,GAEdH,EAAa,WACf6D,GAASD,IAGb,OACIxG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVqG,GACGxG,EAAAC,EAAAC,cAACwG,EAAQ,CACLjH,KAAMA,EACNiD,SAAUA,EACViD,WAAYA,EACZ/C,WAAYA,EACZD,UAAWA,KAGjB6D,GACExG,EAAAC,EAAAC,cAACyG,EAAY,CACTlH,KAAMA,EACNiD,SAAUA,EACVC,UAAWA,EACXC,WAAYA,OChCnBgE,EAAW,SAAHpH,GAUf,IATFqH,EAAOrH,EAAPqH,QACAnE,EAAQlD,EAARkD,SACAiD,EAAUnG,EAAVmG,WACAmB,EAAStH,EAATsH,UAASjE,EAOyBC,mBAAwB,MAAKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAxDkE,EAAShE,EAAA,GAAEiE,EAAYjE,EAAA,GAExBkE,EAAiB,SAAC5G,GACpB2G,EAAa3G,IAGX6G,EAAgB,WAClBF,EAAa,OAGjB,OACIhH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACT4G,GACE/G,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACK0F,EAAQ/E,IAAI,SAACrC,GAAU,OACpBO,EAAAC,EAAAC,cAACiH,EAAQ,CACLhF,IAAK1C,EAAKY,GACVZ,KAAMA,EACNC,YAAauH,MAGrBjH,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CAACpC,UAAU,UAAUC,QAAS0G,GAAU,iBAKtDD,EAAQ/E,IAAI,SAACrC,GACV,GAAIsH,IAActH,EAAKY,GACnB,OACIL,EAAAC,EAAAC,cAACkH,EAAQ,CACLjF,IAAK1C,EAAKY,GACVZ,KAAMA,EACNiD,SAAUA,EACViD,WAAYA,EACZhD,UAAWuE,gBC/C1BG,EAAe,SAAH7H,GAQnB,IAPF8H,EAAI9H,EAAJ8H,KACAC,EAAgB/H,EAAhB+H,iBACAC,EAAOhI,EAAPgI,QAAO3E,EAMmBC,mBAAiB,gBAAeC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAnDvC,EAAKyC,EAAA,GAAE0E,EAAQ1E,EAAA,GAAAI,EACDL,mBAAiB,uBAAsBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAtD3C,EAAI6C,EAAA,GAACqE,EAAOrE,EAAA,GAQlB,OACIrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyH,EAAA,EAAK,CAACL,KAAMA,EAAMM,OAAQL,EAAkBM,WAAW,GACpD7H,EAAAC,EAAAC,cAACyH,EAAA,EAAMG,OAAM,CAACC,aAAW,GACrB/H,EAAAC,EAAAC,cAACyH,EAAA,EAAMK,MAAK,sBAEhBhI,EAAAC,EAAAC,cAACyH,EAAA,EAAMM,KAAI,KACPjI,EAAAC,EAAAC,cAACqB,EAAA,EAAKC,MAAK,CAACC,UAAU,cAClBzB,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,gBACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTR,MAAOZ,EACPsB,SAAU,SACNZ,GAAsC,OACrCyG,EAASzG,EAAEC,OAAOC,UAE3BlB,EAAAC,EAAAC,cAACqB,EAAA,EAAK6D,MAAK,sBACXpF,EAAAC,EAAAC,cAACqB,EAAA,EAAKG,QAAO,CACTuE,GAAG,WACHC,KAAM,EACNhF,MAAOV,EACPoB,SAAU,SACNZ,GAAsC,OACtC0G,EAAQ1G,EAAEC,OAAOC,YAKjClB,EAAAC,EAAAC,cAACyH,EAAA,EAAMO,OAAM,KACTlI,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHgC,QAAQ,YACRnE,QAAS,WACLqH,EAAS,gBACTC,EAAQ,uBACRH,MACF,SAINvH,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CAACgC,QAAQ,UAAUnE,QA7CtB,WAChBoH,EAAQlH,EAAOE,GACfiH,EAAS,gBACTC,EAAQ,uBACRH,MAyC2D,oBCpD7DY,eAAiBrG,IACnB,SAACrC,GAAI,OAAAuD,OAAAoB,EAAA,EAAApB,CAAA,GACEvD,EAAI,CACPG,aAAcH,EAAKG,aAAakC,IAC5B,SAAChC,GAAC,OAAAkD,OAAAoB,EAAA,EAAApB,CAAA,GACKlD,EAAC,CACJ6B,WAAY,GACZL,KAAMxB,EAAEwB,cAMX8G,EAAU,WAAM,IAAAvF,EACKC,mBAAiBqF,GAAQpF,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAhDgE,EAAO9D,EAAA,GAAEsF,EAAUtF,EAAA,GAAAI,EACcL,oBAAS,GAAMO,EAAAL,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAAhDmF,EAAYjF,EAAA,GAAEkF,EAAelF,EAAA,GAyBpC,OACIrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACsI,EAAQ,CACL3B,QAASA,EACTnE,SA3BZ,SAAkB+F,EAAa7C,GAC3ByC,EACIxB,EAAQ/E,IAAI,SAAChC,GAAO,OAAYA,EAAEO,KAAOoI,EAAM7C,EAAU9F,MA0BrD6F,WAZZ,SAAoB8C,GAChBJ,EAAWxB,EAAQhH,OAAO,SAACC,GAAO,OAAc2I,IAAQ3I,EAAEO,OAYlDyG,UATY,WAAH,OAASyB,GAAgB,MAWtCvI,EAAAC,EAAAC,cAACwI,EAAY,CACTpB,KAAMgB,EACNf,iBAZa,WAAH,OAASgB,GAAgB,IAanCf,QA5BZ,SAAiBlH,EAAeE,GAC5B,IAAMoF,EAAc,CAChBtF,MAAMA,EAAME,KAAKA,EACjBH,GAAI,EACJN,WAAW,EACXH,aAAc,IAElByI,EAAU,GAAAjC,OAAApD,OAAAU,EAAA,EAAAV,CAAK6D,GAAO,CAAEjB,QAuBpB5F,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIyI,MAAO,CAAEC,MAAO,UAAU,sBAE9B5I,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKyI,MAAO,CAAEC,MAAO,UACjB5I,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACVH,EAAAC,EAAAC,cAAA,UACK,IAAG,qHAKRF,EAAAC,EAAAC,cAAA,4HAIAF,EAAAC,EAAAC,cAAA,uHAIAF,EAAAC,EAAAC,cAAA,+GAIAF,EAAAC,EAAAC,cAAA,2EAIAF,EAAAC,EAAAC,cAAA,4EAIAF,EAAAC,EAAAC,cAAA,gEACAF,EAAAC,EAAAC,cAAA,0GAIAF,EAAAC,EAAAC,cAAA,wEAIAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,4DChFL2I,MAtBf,WAA4B,IAAAhG,EACMC,oBAAkB,GAAKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA9CiG,EAAO/F,EAAA,GAAEgG,EAAUhG,EAAA,GAE1B,OACI/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAY,6CAE1BH,EAAAC,EAAAC,cAACqC,EAAA,EAAM,CACHnC,QAAS,WACL2I,GAAYD,KAGfA,EAAU,UAAY,UAG/B9I,EAAAC,EAAAC,cAAA,OAAKyI,MAAO,CAAEK,QAASF,EAAU,QAAU,SACvC9I,EAAAC,EAAAC,cAAC+I,EAAO,SCNTC,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtCC,EAAArI,EAAA,GAAAsI,KAAAD,EAAAE,KAAA,UAAqBD,KACjB,SAAA9J,GAAiD,IAA9CgK,EAAMhK,EAANgK,OAAQC,EAAMjK,EAANiK,OAAQC,EAAMlK,EAANkK,OAAQC,EAAMnK,EAANmK,OAAQC,EAAOpK,EAAPoK,QAC/BJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCFxBU,IAASC,OACL9J,EAAAC,EAAAC,cAACF,EAAAC,EAAM8J,WAAU,KACb/J,EAAAC,EAAAC,cAAC8J,EAAG,OAERC,SAASC,eAAe,SAM5BhB","file":"static/js/main.ce694b6d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Quiz } from \"../interfaces/quiz\";\n\nimport \"./QuizCard.css\";\nimport { Question } from \"../interfaces/question\";\n\nexport const QuizCard = ({\n    quiz,\n    handleClick\n}: {\n    quiz:Quiz;\n    handleClick: (id:number)=>void;\n}) => {\n    const filteredQuestions = quiz.questionList.filter(\n        (q: Question): boolean =>\n            (quiz.published && q.published) || !quiz.published\n    );\n\n    return (\n        <div className=\"quiz_view_card\">\n            <div className=\"d-flex align-items-baseline\">\n                <h3\n                    className=\"title\"\n                    onClick={() => {\n                        handleClick(quiz.id);\n                    }}\n                >\n                    {quiz.title}\n                </h3>\n                <p>\n                    {filteredQuestions.length} question\n                    {filteredQuestions.length !== 1 ? \"s\" : \"\"}\n                </p>\n            </div>\n            <p>{quiz.body}</p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { Question } from \"../interfaces/question\";\nimport { Form, Button } from \"react-bootstrap\";\n\nimport \"./QuizQuestion.css\";\ntype ChangeEvent = React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>;\n\nexport const QuizQuestion = ({\n    index,\n    question,\n    submitted,\n    handleSubmit,\n    addPoints,\n    editQuestionSub\n}: {index:number,\n    question:Question,\n    submitted:boolean,\n    handleSubmit:(n:number)=>void,\n    addPoints:(n:number)=>void,\n    editQuestionSub:(n:number,s:string)=>void\n}) => {\n    const handleClick = (e: ChangeEvent) => {\n        if (!submitted) {\n            editQuestionSub(question.id, e.target.value);\n        }\n    };\n\n    const handleSubmitClick = () => {\n        handleSubmit(index);\n        if (question.submission === question.expected) {\n            addPoints(5);\n        }\n    };\n\n    return (\n        <>\n            <hr />\n            <div className=\"question\">\n                <div className=\"question_header\">\n                    <h4 data-testid=\"question_body\">\n                        {index + 1}. {question.body}\n                    </h4>\n                    <h4>\n                        {question.points} pt{question.points !== 1 ? \"s\" : \"\"}\n                    </h4>\n                </div>f\n                <div className=\"answer_box\">\n                    {question.type === \"short_answer_question\" && (\n                        <Form.Group controlId=\"formShortAnswerBox\">\n                            <Form.Control\n                                data-testid=\"select-option\"\n                                value={question.submission}\n                                onChange={handleClick}\n                            ></Form.Control>\n                        </Form.Group>\n                    )}\n                    {question.type === \"multiple_choice_question\" && (\n                        <div>\n                            {question.options.map(\n                                (option: string, i: number) => (\n                                    <Form.Check\n                                        type= \"checkbox\"\n                                        name={\"questionChoice\" + index}\n                                        key={option + \" | \" + i}\n                                        label={option}\n                                        value={option}\n                                        checked={question.submission === option}\n                                        onChange={handleClick}\n                                    />\n                                )\n                            )}\n                        </div>\n                    )}\n                    <div className=\"sub_check\">\n                        <h2 className={submitted ? \"\" : \"hidden\"}>\n                            {question.submission === question.expected\n                                ? \"✔️\"\n                                : \"❌\"}\n                        </h2>\n                        <Button\n                            disabled={submitted}\n                            className=\"submit_btn\"\n                            onClick={handleSubmitClick}\n                        >\n                            Submit\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Question } from \"../interfaces/question\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { QuestionEdit } from \"./QuestionEdit\";\n\nimport \"./QuizExpanded.css\";\nimport { QuizQuestion } from \"./QuizQuestion\";\n\nexport const QuizExpanded = ({\n    quiz,\n    editQuiz,\n    resetView,\n    switchEdit\n}: {\n    quiz: Quiz;\n    editQuiz:(qID:number, q:Quiz)=> void; \n    resetView: () => void;\n    switchEdit: () => void;\n}) => {\n    const filteredQuestions = quiz.questionList.filter(\n        (q: Question): boolean =>\n            (quiz.published && q.published) || !quiz.published\n    );\n\n    const [points, setPoints] = useState<number>(0);\n    const [submitArr, setSubmitArr] = useState<boolean[]>(\n        new Array(filteredQuestions.length)\n    );\n\n    const handleQuestionSubmit = (index: number) => {\n        const newSubmitArr = [...submitArr];\n        newSubmitArr.splice(index, 3, true);\n        setSubmitArr(newSubmitArr);\n    };\n\n    const totalPoints = filteredQuestions.reduce(\n        (prev: number, q: Question): number => prev + q.points,\n        0\n    );\n\n    const addPoints = (p: number) => {\n        setPoints((prevCount) => prevCount + p);\n    };\n\n    const reset = () => {\n        console.log(\"daf\")\n        setSubmitArr(new Array(filteredQuestions.length));\n        editQuiz(quiz.id, {\n            ...quiz,\n            questionList: quiz.questionList.map(\n                (q: Question): Question => ({ ...q, submission: \"\" })\n            )\n        });\n\n        setPoints(0);\n    };\n\n    const editQuestionSub = (questionId: number, sub: string) => {\n        editQuiz(quiz.id, {\n            ...quiz,\n            questionList: quiz.questionList.map((question:Question): Question=>questionId === question.id? {...question, submission:sub}:{...question})\n        });\n    };\n\n    return (\n        <>\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div className=\"d-flex align-items-baseline\">\n                    <h1 className=\"title\">{quiz.title}</h1>\n                    <p>\n                        {filteredQuestions.length} question\n                        {filteredQuestions.length !== 1 ? \"s\" : \"\"}\n                    </p>\n                </div>\n                <div>\n                    <Button\n                        className=\"esc_button text-align-center\"\n                        variant=\"warning\"\n                        onClick={() => {\n                            reset();\n                            switchEdit();\n                        }}\n                    >\n                        Edit\n                    </Button>\n                    <Button\n                        className=\"esc_button text-align-center\"\n                        variant=\"danger\"\n                        onClick={resetView}\n                    >\n                        {\"Exit\"}\n                    </Button>\n                </div>\n            </div>\n            <p className=\"desc\">{quiz.body}</p>\n            {filteredQuestions.map((q: Question, index: number) => (\n                <QuizQuestion\n                    key={quiz.id + \"|\" + q.id}\n                    index={index}\n                    question= {q}\n                    submitted={submitArr[index]}\n                    handleSubmit={handleQuestionSubmit}\n                    addPoints={addPoints}\n                    editQuestionSub={editQuestionSub}\n                ></QuizQuestion>\n            ))}\n            <hr />\n            <div className=\"footer\">\n                <Button variant=\"danger\" onClick={reset}>\n                    Reset\n                </Button>\n                <span className=\"score_report\">\n                    {points}/{totalPoints}\n                </span>\n            </div>\n        </>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Question, QuestionType } from \"../interfaces/question\";\n\nimport \"./QuestionEdit.css\";\n\nexport const QuestionEdit = ({\n    index,\n    lastIndex,\n    question,\n    editQuestion,\n    removeQuestion,\n    swapQuestion\n}: {\n    index: number\n    lastIndex:number\n    question: Question\n    editQuestion:  (questionId: number, newQuestion: Question) => void\n    removeQuestion: (questionId: number) => void\n    swapQuestion: (idx1: number, idx2: number) => void\n}) => {\n    const [a, b] = useState<number>(\n        question.options.findIndex((s: string) => question.expected === s)\n    );\n\n    const handleNumOptions = (e: React.ChangeEvent<HTMLInputElement>) => {\n        b(0);\n        const newNum =\n            parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value);\n        editQuestion(question.id, {\n            ...question,\n            type: \"multiple_choice_question\",\n            expected: \"Example Answer\",\n            options: Array(newNum).fill(\"Example Answer\")\n        });\n    };\n\n    const handleSwitch = () => {\n        b(0);\n        editQuestion(question.id, {\n            ...question,\n            type: \"multiple_choice_question\",\n            expected: \"Example Answer\",\n            options: Array(3).fill(\"Example Answer\")\n        });\n    };\n\n    const handlePoints = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \tquestion.points = parseInt(e.target.value)\n        editQuestion(question.id, question);\n    };\n\n    const handleChoiceChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        i: number\n    ) => {\n        const newOptions = [...question.options];\n        newOptions.splice(i, 1, e.target.value);\n        editQuestion(question.id, {\n            ...question,\n            options: newOptions,\n            expected: a === i ? e.target.value : question.expected\n        });\n    };\n\n    const handleRadioChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const idx = parseInt(e.target.value);\n        b(idx);\n        editQuestion(question.id, {\n            ...question,\n            expected: question.options[idx]\n        });\n    };\n\n    return (\n        <>\n            <hr />\n            <div className=\"edit_question\">\n                <div className=\"edit_title_row\">\n                    <div className=\"edit_title_box\">\n                        <h4>{index + 1}. </h4>\n                        <Form.Group\n                            className=\"title_input\"\n                            controlId=\"editTitleFormId\"\n                        >\n                            <Form.Control\n                                value={question.body}\n                                data-testid=\"edit_question_title\"\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    editQuestion(question.id, {\n                                        ...question,\n                                        body: e.target.value\n                                    });\n                                }}\n                            ></Form.Control>\n                        </Form.Group>\n                    </div>\n                    <div className=\"edit_title_box\">\n                        <Form.Group\n                            className=\"points_input\"\n                            controlId=\"editPointsFormId\"\n                        >\n                            <Form.Control\n                                value={question.points}\n                                type=\"number\"\n                                onChange={handlePoints}\n                            ></Form.Control>\n                        </Form.Group>\n                        <h4>pt{question.points !== 1 ? \"s\" : \"\"}</h4>\n                    </div>\n                </div>\n                <div className=\"center_section\">\n                    <div className=\"edit_answer_box\">\n                        <div className=\"type_form\">\n                            <Form.Group controlId=\"questionTypeFormId\">\n                                <Form.Label>Type: </Form.Label>\n                                <Form.Select\n                                    className=\"type_dropdown\"\n                                    value={question.type}\n                                    onChange={handleSwitch}\n                                >\n                                    <option\n                                        data-testid={\n                                            \"question_type_dropdown_\" + index\n                                        }\n                                        value=\"multiple_choice_question\"\n                                    >\n                                        Multiple Choice\n                                    </option>\n                                    <option\n                                        data-testid={\n                                            \"question_type_dropdown_\" + index\n                                        }\n                                        value=\"short_answer_question\"\n                                    >\n                                        Short Answer\n                                    </option>\n                                </Form.Select>\n                            </Form.Group>\n                            {question.type === \"multiple_choice_question\" && (\n                                <>\n                                    <Form.Group controlId=\"editNumChoicesId\">\n                                        <Form.Label>Choices: </Form.Label>\n                                        <Form.Control\n                                            className=\"num_choices\"\n                                            value={question.options.length}\n                                            type=\"number\"\n                                            onChange={handleNumOptions}\n                                        ></Form.Control>\n                                    </Form.Group>\n                                </>\n                            )}\n                        </div>\n                        <div>\n                            {question.type === \"short_answer_question\" && (\n                                <Form.Group controlId=\"formEditShortExpectedBox\">\n                                    <Form.Label>Answer:</Form.Label>\n                                    <Form.Control\n                                        value={question.expected}\n                                        onChange={(\n                                            e: React.ChangeEvent<HTMLInputElement>\n                                        ) => {\n                                            editQuestion(question.id, {\n                                                ...question,\n                                                expected: e.target.value\n                                            });\n                                        }}\n                                    ></Form.Control>\n                                </Form.Group>\n                            )}\n                            {question.type === \"multiple_choice_question\" && (\n                                <Form.Group controlId=\"formEditMultipleExpectedBox\">\n                                    <Form.Label>Answer:</Form.Label>\n                                    {question.options.map(\n                                        (option: string, i: number) => (\n                                            <div\n                                                key={i}\n                                                className=\"radio_question_box\"\n                                            >\n                                                <Form.Check\n                                                    type=\"radio\"\n                                                    name={\n                                                        \"questionChoice\" + index\n                                                    }\n                                                    value={i}\n                                                    checked={a === i}\n                                                    onChange={handleRadioChange}\n                                                />\n                                                <Form.Control\n                                                    name={\n                                                        \"questionChoice\" + index\n                                                    }\n                                                    value={option}\n                                                    onChange={(\n                                                        e: React.ChangeEvent<HTMLInputElement>\n                                                    ) => {\n                                                        handleChoiceChange(\n                                                            e,\n                                                            i\n                                                        );\n                                                    }}\n                                                ></Form.Control>\n                                            </div>\n                                        )\n                                    )}\n                                </Form.Group>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"swap_button_container\">\n                        <Button\n                            disabled={index === 0}\n                            className=\"swap_button\"\n                            onClick={() => {\n                                swapQuestion(index, index - 1);\n                            }}\n                        >\n                            ▲\n                        </Button>\n                        <Button\n                            disabled={index === lastIndex}\n                            className=\"swap_button\"\n                            onClick={() => {\n                                swapQuestion(index, index + 1);\n                            }}\n                        >\n                            ▼\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"edit_question_footer\">\n                    <Form.Check\n                        className=\"published_question_check\"\n                        data-testid=\"question_published_check\"\n                        type=\"checkbox\"\n                        id=\"is_question_published_check\"\n                        label=\"Published\"\n                        checked={question.published}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                            editQuestion(question.id, {\n                                ...question,\n                                published: e.target.checked\n                            });\n                        }}\n                    ></Form.Check>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => {\n                            removeQuestion(question.id);\n                        }}\n                    >\n                        Delete\n                    </Button>\n                </div>\n            </div>\n        </>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Question } from \"../interfaces/question\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { QuestionEdit } from \"./QuestionEdit\";\n\nimport \"./QuizEdit.css\";\n\nexport const QuizEdit = ({\n    quiz,\n    editQuiz,\n    deleteQuiz,\n    switchEdit,\n    resetView\n}: {quiz:Quiz;\n    editQuiz:(qID:number, q:Quiz)=> void; \n    deleteQuiz:(qID:number) => void;\n    switchEdit: () => void;\n    resetView: () => void;\n\n}) => {\n    const [newQuiz, setNewQuiz] = useState<Quiz>({ ...quiz });\n\n    const editQuestion = (questionId: number, newQuestion: Question) => {\n        setNewQuiz({\n            ...newQuiz,\n            questionList: newQuiz.questionList.map((question:Question): Question => questionId===question.id ? {...newQuestion}:question)\n        });\n    };\n\n    const removeQuestion = (questionId: number) => {\n        setNewQuiz({\n            ...newQuiz,\n            questionList: newQuiz.questionList.filter((question:Question):boolean => questionId !== question.id)\n            \n        });\n    };\n\n    const saveChanges = () => {\n        const newTitle= \"spam\"\n        const newquiz = {...newQuiz,title:newTitle}\n        setNewQuiz(newquiz)\n        editQuiz(quiz.id,newQuiz );\n    };\n\n    const swapQuestion = (idx1: number, idx2: number) => {\n        setNewQuiz({\n            ...newQuiz,\n            questionList: newQuiz.questionList.map(\n                (q: Question, idx: number): Question => {\n                    if (idx === idx1) return newQuiz.questionList[idx2];\n                    if (idx === idx2) return newQuiz.questionList[idx1];\n                    else return newQuiz.questionList[idx2];\n                }\n            )\n        });\n    };\n\n    return (\n        <div>\n            <div className=\"edit_header\">\n                <Form.Group controlId=\"formEditQuizId\">\n                    <div className=\"title_published_flex\">\n                        <div className=\"edit_title_area\">\n                            <Form.Label>Title: </Form.Label>\n                            <Form.Control\n                                value={newQuiz.title}\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) =>\n                                    setNewQuiz({\n                                        ...newQuiz,\n                                        title: e.target.value\n                                    })\n                                }\n                            ></Form.Control>\n                        </div>\n                        <Form.Check\n                            className=\"published_check\"\n                            type=\"checkbox\"\n                            id=\"is-published_check\"\n                            label=\"Quiz Published\"\n                            data-testid=\"Quiz Published\"\n                            checked={newQuiz.published}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                                setNewQuiz({\n                                    ...newQuiz,\n                                    published: e.target.checked\n                            });\n                            }}\n                        ></Form.Check>\n                    </div>\n                    <Form.Label>Description: </Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={3}\n                        value={newQuiz.body}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                            setNewQuiz({ ...newQuiz, body: e.target.value })\n                        }\n                    ></Form.Control>\n                </Form.Group>\n            </div>\n\n            <div>\n                {newQuiz.questionList.map((q: Question, index: number) => (\n                    <QuestionEdit\n                        key={newQuiz.id + \"|\" + q.id}\n                        index={index}\n                        lastIndex={newQuiz.questionList.length - 1}\n                        question={q}\n                        editQuestion={editQuestion}\n                        removeQuestion={removeQuestion}\n                        swapQuestion={swapQuestion}\n                    ></QuestionEdit>\n                ))}\n            </div>\n            <hr />\n            <div>\n                <Button\n                    className=\"add_question_button\"\n                    onClick={() => {\n                        setNewQuiz({\n                            ...newQuiz,\n                            questionList: [\n                                ...newQuiz.questionList,\n                                {\n                                    id: newQuiz.questionList.length,\n                                    body: \"Example Question\",\n                                    type: \"short_answer_question\",\n                                    options: [],\n                                    submission: \"\",\n                                    expected: \"Example Answer\",\n                                    points: 1,\n                                    published: false\n                                }\n                            ]\n                        });\n                    }}\n                >\n                    Add Question\n                </Button>\n                <div className=\"edit_footer\">\n                    <div>\n                        <Button\n                            variant=\"success\"\n                            className=\"save_edit_btn\"\n                            onClick={() => {\n                                saveChanges();\n                                switchEdit();\n                            }}\n                        >\n                            Save\n                        </Button>\n                        <Button variant=\"warning\" onClick={switchEdit}>\n                            Cancel\n                        </Button>\n                    </div>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => {\n                            deleteQuiz(quiz.id);\n                            resetView();\n                        }}\n                    >\n                        Delete Quiz\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { QuizExpanded } from \"./QuizExpanded\";\nimport { QuizEdit } from \"./QuizEdit\";\n\nimport \"./QuizView.css\";\n\nexport const QuizView = ({\n    quiz,\n    editQuiz,\n    deleteQuiz,\n    resetView\n}: {quiz: Quiz;\n    editQuiz:(qID:number, q:Quiz)=> void;\n    deleteQuiz:(qID:number) => void;\n    resetView: () => void;\n}) => {\n    const [edit, setEdit] = useState(false);\n\n    const switchEdit = () => {\n        setEdit(!edit);\n    };\n\n    return (\n        <div className=\"quiz_card\">\n            {edit && (\n                <QuizEdit\n                    quiz={quiz}\n                    editQuiz={editQuiz}\n                    deleteQuiz={deleteQuiz}\n                    switchEdit={switchEdit}\n                    resetView={resetView}\n                ></QuizEdit>\n            )}\n            {!edit && (\n                <QuizExpanded\n                    quiz={quiz}\n                    editQuiz={editQuiz}\n                    resetView={resetView}\n                    switchEdit={switchEdit}\n                ></QuizExpanded>\n            )}\n        </div>\n    );\n};\n;\n","import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { QuizCard } from \"./QuizCard\";\nimport \"./QuizList.css\";\nimport { QuizView } from \"./QuizView\";\n\nexport const QuizList = ({\n    quizzes,\n    editQuiz,\n    deleteQuiz,\n    showModal\n}: {\n    quizzes: Quiz[] ,\n    editQuiz: (qId: number, newQuiz: Quiz) => void;\n    deleteQuiz: (qId: number)=> void;\n    showModal: () => void\n}) => {\n    const [displayId, setDisplayId] = useState<null | number>(null);\n\n    const handleQuizView = (id: number) => {\n        setDisplayId(id);\n    };\n\n    const resetQuizView = () => {\n        setDisplayId(null);\n    };\n\n    return (\n        <div className=\"quiz_list\">\n            {!displayId && (\n                <>\n                    {quizzes.map((quiz: Quiz) => (\n                        <QuizCard\n                            key={quiz.id}\n                            quiz={quiz}\n                            handleClick={handleQuizView}\n                        ></QuizCard>\n                    ))}\n                    <Button className=\"add_btn\" onClick={showModal}>\n                        Add New Quiz\n                    </Button>\n                </>\n            )}\n            {quizzes.map((quiz: Quiz) => {\n                if (displayId === quiz.id) {\n                    return (\n                        <QuizView\n                            key={quiz.id}\n                            quiz={quiz}\n                            editQuiz={editQuiz}\n                            deleteQuiz={deleteQuiz}\n                            resetView={resetQuizView}\n                        ></QuizView>\n                    );\n                }\n            })}\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Button, Modal, Form } from \"react-bootstrap\";\n//type ChangeEvent = React.ChangeEvent<\n //   HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement\n//>;\nexport const AddQuizModal = ({\n    show,\n    handleCloseModal,\n    addQuiz\n}: {\n    show: boolean;\n    handleCloseModal: () => void;\n    addQuiz: (title: string, body:string)=> void;\n}) => {\n    const [title, setTitle] = useState<string>(\"Example Quiz\");\n    const[body,setBody]= useState<string>(\"Example Description\");\n    const saveChanges = () => {\n        addQuiz(title, body);\n        setTitle(\"Example Quiz\");\n        setBody(\"Example Description\");\n        handleCloseModal();\n    };\n\n    return (\n        <div>\n            <Modal show={show} onHide={handleCloseModal} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add New Quiz</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group controlId=\"formQuizId\">\n                        <Form.Label>Title: </Form.Label>\n                        <Form.Control\n                            value={title}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => setTitle(e.target.value)}\n                        ></Form.Control>\n                        <Form.Label>Description: </Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            rows={3}\n                            value={body}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            )=> setBody(e.target.value)}\n                            \n                        ></Form.Control>\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => {\n                            setTitle(\"Example Quiz\");\n                            setBody(\"Example Description\");\n                            handleCloseModal();\n                        }}\n                    >\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={saveChanges}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { Question, QuestionType } from \"../interfaces/question\";\nimport { QuizList } from \"./QuizList\";\nimport { AddQuizModal } from \"./AddQuizModal\";\n\nimport \"./Quizzer.css\";\nimport sample from \"../data/quizzes.json\";\n\nconst QUIZZES = sample.map(\n    (quiz): Quiz => ({\n        ...quiz,\n        questionList: quiz.questionList.map(\n            (q): Question => ({\n                ...q,\n                submission: \"\",\n                type: q.type as QuestionType\n            })\n        )\n    })\n);\n\nexport const Quizzer = () => {\n    const [quizzes, setQuizzes] = useState<Quiz[]>(QUIZZES);\n    const [showAddModal, setShowAddModal] = useState(false);\n\n    function editQuiz(qId: number, newQuiz: Quiz) {\n        setQuizzes(\n            quizzes.map((q: Quiz): Quiz => (q.id === qId ? newQuiz : q))\n        );\n    }\n\n    function addQuiz(title: string, body: string) {\n        const newQuiz: Quiz={\n            title:title,body:body,\n            id: 0,\n            published: false,\n            questionList: []\n        };\n        setQuizzes([...quizzes, newQuiz]);\n    }\n\n    function deleteQuiz(qId: number) {\n        setQuizzes(quizzes.filter((q: Quiz): boolean => qId !== q.id));\n    }\n\n    const handleShowModal = () => setShowAddModal(true);\n    const handleCloseModal = () => setShowAddModal(false);\n\n    return (\n        <div className=\"quizzer\">\n            <QuizList\n                quizzes={quizzes}\n                editQuiz={editQuiz}\n                deleteQuiz={deleteQuiz}\n                showModal={handleShowModal}\n            ></QuizList>\n            <AddQuizModal\n                show={showAddModal}\n                handleCloseModal={handleCloseModal}\n                addQuiz={addQuiz}\n            ></AddQuizModal>\n            <hr />\n            <h2 style={{ color: \"white\" }}>Application Sketch</h2>\n            {/* <img src={require(\"./sketchFINAL.jpg\")} /> */}\n            <hr />\n            <div style={{ color: \"white\" }}>\n                <h2>Completed Features</h2>\n                <ul className=\"completedList\">\n                    <li>\n                        {\" \"}\n                        Users can see a list of quizzes, including the quizzes\n                        title, description, and how many questions it has\n                        (TESTED)\n                    </li>\n                    <li>\n                        Users can select a specific quiz to see the questions,\n                        including the questions name, body, and points (TESTED)\n                    </li>\n                    <li>\n                        Quiz questions can be of AT LEAST two types: a short\n                        answer question or multiple choice question (TESTED)\n                    </li>\n                    <li>\n                        Users can enter or choose an answer for a quiz question,\n                        and be told if they are correct (TESTED)\n                    </li>\n                    <li>\n                        Users can see how many total points they have earned\n                        (TESTED)\n                    </li>\n                    <li>\n                        Users can clear out their existing answers for a quiz\n                        (TESTED)\n                    </li>\n                    <li>Users can publish or unpublish a question (TESTED)</li>\n                    <li>\n                        Users can filter the questions in a list so that only\n                        published questions are shown (TESTED)\n                    </li>\n                    <li>\n                        Users can edit the questions and fields of a quiz\n                        (TESTED)\n                    </li>\n                    <li>Users can add a new quiz question (TESTED)</li>\n                    <li>Users can delete an existing quiz question (TESTED)</li>\n                    <li>Users can reorder quiz questions (TESTED)</li>\n                    <li>Users can add a new quiz (TESTED)</li>\n                    <li>Users can delete an existing quiz (TESTED)</li>\n                </ul>\n            </div>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Quizzer } from \"./quizzer/Quizzer\";\nimport { Button } from \"react-bootstrap\";\n//import { ShowHideTasks } from \"./tasks/ShowHideTasks\";\n\nfunction App(): JSX.Element {\n    const [quizzer, setQuizzer] = useState<boolean>(true);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                UD CISC275 with React Hooks and TypeScript\n                <Button\n                    onClick={() => {\n                        setQuizzer(!quizzer);\n                    }}\n                >\n                    {quizzer ? \"Quizzer\" : \"Tasks\"}\n                </Button>\n            </header>\n            <div style={{ display: quizzer ? \"block\" : \"none\" }}>\n                <Quizzer></Quizzer>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","// You will not need to modify this file\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}